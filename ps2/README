Your job for this assignment is to implement a parser and lexer for a
simple Fortran like language that we'll call Fish (Fortran-ish).  You
may use either lex/yacc or parsing combinators (or even a direct
recursive descent parser, if you like).

In this directory you'll find incomplete templates for either of these
approaches.  The files you need to edit depend upon which
implementation strategy you use:

- Lex/Yacc: edit lex.mll and parse.mly
- Parser Combinators or Recursive Descent: edit comblexer.ml and combparser.ml

The files are incomplete but you should be able to compile them with
the provided Makefile. The file ast.ml contains the abstract syntax
for Fish programs. The file eval.ml contains an interpreter for Fish
programs.

Running make in the current directory generates 2 executables ps2yacc
and ps2comb to test the approach you have chosen. Both expect a file
to parse as an argument.

Usage:
ps2yacc [file-to-parse]

ps2comb [file-to-parse]

These will run your lexer/parser on the Fish source file and then pass
the generated AST to the evaluator in eval.ml, and print the output.

You can find a variety of test files in the test/ subdirectory. This
time, we do not include a test driver script: we would recommend
getting in the habit of writing your own tester scripts to try
evaluating the test programs and comparing with what you think the expected
output ought to be. Of course, you can also fall back to the
autograder on Gradescope to gauge your progress.


Submitting your work:
========================

Upload the two files for the approach you took to Gradescope (either
lex.mll and parse.mly OR comblexer.ml and combparser.ml).


Hint and tips:
========================

If you go the combinator route, you probably want to take a look at
the lcombinators.ml file, which defines a library of useful helper
functions for parser combinators.

If you go the lex/yacc route, you probably want to take a look at some
more information on ocamllex and ocamlyacc. There is a very old (yet
still useful) tutorial on each of these here:

- https://web.archive.org/web/20150906133207/http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex-ocamlyacc/ocamllex-tutorial/index.html
- https://web.archive.org/web/20150906141211/http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex-ocamlyacc/ocamlyacc-tutorial/index.html

Also you can checkout the official OCaml manual chapter on them:

https://v2.ocaml.org/manual/lexyacc.html

Fish Syntax
=========================

The Fish language is very simple and only includes integer expressions
and statements. Here is an example Fish program:

  /* this is a comment */
  x = 42;
  y = 31;
  for (s = 0; x > 0; x = x - 1) {
    y = y + 1;
  }
  return y;

More example Fish programs can be found in the test directory in
ps2.zip. As you can see, the syntax and semantics of Fish programs is
intended to follow that of C (and Java). Your job is to write a lexer
and parser for Fish using ML-Lex and ML-Yacc. In the interest of not
giving too much away, We've intentionally not specified the language's
syntax carefully. To a large degree, this is up to you to figure
out. However, here are some guidelines that we expect you to follow:

- Comments, as in C, should start with "/*" and end with
  "*/". Comments in Fish (like C) do not nest.

- Expressions are grouped with parentheses, whereas statements are
  grouped with braces "{" and "}".

- You should follow the usual precedence and associativity for
  arithmetic and logical operations. For instance, * and / bind
  tighter than + and -, and arithmetic binds tighter than comparisons,
  and comparisons bind tighter than && and ||, and finally, assignment
  comes last in the precedence. You may wish to look up the standard
  associativity and precedence of C operations.

- Identifiers must start with a character, and can include characters,
  digits, or underscores.

- Numbers are restricted to decimal integers. Note that your parser
  should support things like "-42".

- Fish, as in C, lets you have an "empty" statement -- for instance:

        for (x = 0; x < 10; x = x + 1) /* empty statement */ ;

- You can use "skip", defined in ast.ml to represent an empty
  statement.

- If you use lex/yacc, your grammar ought to have no conflicts. So
  you'll have to resolve the "dangling else" discussed in the text.

You should make sure to test your parser extensively to make sure it
is behaving correctly. You can find test cases in the tests/
subdirectory.
