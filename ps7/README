For PS 7, your job is to construct a liveness dataflow analysis from a
CFG representation and then use the information to build an
interference graph.

Start early!

The file cfg_ast.ml contains the definition of the CFG intermediate form.
At a conceptual level, it's quite close to MIPS code except that it
allows variables to serve as operands.

Basic blocks are represented as lists of instructions that
includes labels and control-flow operators (e.g., jump, return,
if-then-goto.)  Although this fails to capture the structural
constraints on basic blocks (always start with a label, always end
with control-flow, no-intervening label or control-flow), it will make
compilation and analysis a little easier.

Included in cfg_ast.ml is a function fn2blocks which translates the
abstract syntax of a Cish function into a list of basic blocks.

**Warning!** This code has not been heavily tested and may have bugs
within it.  If you encounter a bug, please let me know and I will post
a fix as soon as possible. Such bugs would not affect the correctness
of your dataflow analysis/interfence graph generation, but they may
make it confusing to debug, so let me know!

Your goal is to write the function:

  build_interfere_graph : function -> interfere_graph

where "function" is a list of CFG basic blocks.

To construct the interference graph, you will have to build a liveness
dataflow analysis that calculates for each instruction a set of
variables that are live coming in to the instruction, and a set of
variables that are live coming out of the instruction.  Refer to the
lecture notes for details on the dataflow algorithm for liveness.

If you run `make` it produces a binary called ./ps7_cfg. Running

 ./ps7_cfg [name of cish file]

calls the Cish 2 block converter, then runs your interference graph generator,
and then tries to print the CFG blocks and the interference. Here's some sample
output of the interference graph printer:

```
{
  $2	: {x0,x1,x2,x3,x4,x5,x6,x7,x8,x9}
  $16	: {x0,x1,x3,x4,x5,x6,x7,x8,x9}
  $17	: {x0,x1,x2,x4,x5,x6,x7,x8,x9}
  $18	: {x0,x1,x2,x3,x5,x6,x7,x8,x9}
  $19	: {x0,x1,x2,x3,x4,x6,x7,x8,x9}
  $20	: {x0,x1,x2,x3,x4,x5,x7,x8,x9}
  $21	: {x0,x1,x2,x3,x4,x5,x6,x8,x9}
  $22	: {x0,x1,x2,x3,x4,x5,x6,x7,x9}
  $23	: {x0,x1,x2,x3,x4,x5,x6,x7,x8}
  $30	: {x1,x2,x3,x4,x5,x6,x7,x8,x9}
  $31	: {x0,x2,x3,x4,x5,x6,x7,x8,x9}
  x0	: {$2,$16,$17,$18,$19,$20,$21,$22,$23,$31,x1,x10,x2,x3,x4,x5,x6,x7,x8,x9}
  x1	: {$2,$16,$17,$18,$19,$20,$21,$22,$23,$30,x0,x10,x2,x3,x4,x5,x6,x7,x8,x9}
  x10	: {x0,x1,x2,x3,x4,x5,x6,x7,x8,x9}
  x2	: {$2,$17,$18,$19,$20,$21,$22,$23,$30,$31,x0,x1,x10,x3,x4,x5,x6,x7,x8,x9}
  x3	: {$2,$16,$18,$19,$20,$21,$22,$23,$30,$31,x0,x1,x10,x2,x4,x5,x6,x7,x8,x9}
  x4	: {$2,$16,$17,$19,$20,$21,$22,$23,$30,$31,x0,x1,x10,x2,x3,x5,x6,x7,x8,x9}
  x5	: {$2,$16,$17,$18,$20,$21,$22,$23,$30,$31,x0,x1,x10,x2,x3,x4,x6,x7,x8,x9}
  x6	: {$2,$16,$17,$18,$19,$21,$22,$23,$30,$31,x0,x1,x10,x2,x3,x4,x5,x7,x8,x9}
  x7	: {$2,$16,$17,$18,$19,$20,$22,$23,$30,$31,x0,x1,x10,x2,x3,x4,x5,x6,x8,x9}
  x8	: {$2,$16,$17,$18,$19,$20,$21,$23,$30,$31,x0,x1,x10,x2,x3,x4,x5,x6,x7,x9}
  x9	: {$2,$16,$17,$18,$19,$20,$21,$22,$30,$31,x0,x1,x10,x2,x3,x4,x5,x6,x7,x8}
}
```

Each row starts with the name of a in the graph (so either "$x:" representing
register x, or a string, representing a variable). Then, after the colon it
prints the set of all the nodes that are adjacent to that node.

For example, in the above, variable x0 interferes with (among many other
things) register $2 and variable x9.

================

# Hints and Clarification

First, a clarification. There are two sensible ways to define
interference, one used in the reference book by Appel and one used in
the lecture notes:

- Lecture notes definition: x and y interfere if x and y are both live
  at the same time

- Appel's definition: x and y interfere if y is live when x is defined

These definitions differ under the following edge case: Under Appel's
definition, x and y will interfere even if x is never used after its
definition. Yet if x is never used after its definition, it would not
ever be live, so it could not interfere with y under the lecture notes
definition.

This discrepancy doesn't really matter too much, particularly if
you have dead code elimination, so we won't stress it; feel free to pick
either choice.

Second, you can take a look at some sample output from the reference
compiler in the sample/ subdirectory. Each output file is named after
the corresponding cish test case it was generated from.

Don't worry too much about trying to *exactly* match this sample
output, particularly for the register nodes in the graph. I don't
particularly care if you exactly get the right liveness analysis for
the registers / calling convention of MIPS.  The autograder is going
to be focused instead on clearly incorrect claims about interference
(or lack of interference) between temporary variables.

It's worth noting that this sample output uses the Appel-style
definition of interference.
